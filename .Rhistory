sample(vec)
sample(vec)
sample(vec)
sample(vec)
choose(10,5)
choose(3,1)
choose(3,3)
choose(3,1)
choose(3,2)
getUniquePerms <- function(groupAssignments, numPerms)
{
set.seed(1)
perms <- matrix(,nrow = numPerms,ncol = length(groupAssignments))
lowest <- numPerms
if(choose(length(groupAssignments),sum(groupAssignments == 0)) < lowest){
lowest <- choose(length(groupAssignments),sum(groupAssignments == 0))
}
perms <- matrix(groupAssignments,nrow = 1, ncol = length(groupAssignments))
for(i in seq(from=1,to=lowest)){
row <- sample(groupAssignments)
for(j in seq(from1,to=nrow(perms))){
if(!isTRUE(all.equal(perms[j,],row))){
perms <- rbind(perms,row)
}
}
}
return(perms)
}
vec <- c(0,0,1)
stuff <- getUniquePerms(groupAssignments=vec, numPerms=30)
getUniquePerms <- function(groupAssignments, numPerms)
{
set.seed(1)
perms <- matrix(,nrow = numPerms,ncol = length(groupAssignments))
lowest <- numPerms
if(choose(length(groupAssignments),sum(groupAssignments == 0)) < lowest){
lowest <- choose(length(groupAssignments),sum(groupAssignments == 0))
}
perms <- matrix(groupAssignments,nrow = 1, ncol = length(groupAssignments))
for(i in seq(from=1,to=lowest)){
row <- sample(groupAssignments)
for(j in seq(from=1,to=nrow(perms))){
if(!isTRUE(all.equal(perms[j,],row))){
perms <- rbind(perms,row)
}
}
}
return(perms)
}
vec <- c(0,0,1)
stuff <- getUniquePerms(groupAssignments=vec, numPerms=30)
stuff
source('C:/Users/Michael/OneDrive/Documents/up2.R')
debugSource('C:/Users/Michael/OneDrive/Documents/up2.R')
choose(length(groupAssignments),sum(groupAssignments == 0))
stuff
getUniquePerms <- function(groupAssignments, numPerms)
{
set.seed(1)
perms <- matrix(,nrow = numPerms,ncol = length(groupAssignments))
lowest <- numPerms
if(choose(length(groupAssignments),sum(groupAssignments == 0)) < lowest){
lowest <- choose(length(groupAssignments),sum(groupAssignments == 0))
}
perms <- matrix(groupAssignments,nrow = 1, ncol = length(groupAssignments))
for(i in seq(from=1,to=lowest)){
print(i)
row <- sample(groupAssignments)
for(j in seq(from=1,to=nrow(perms))){
if(!isTRUE(all.equal(perms[j,],row))){
perms <- rbind(perms,row)
}
}
}
return(perms)
}
vec <- c(0,0,1)
stuff <- getUniquePerms(groupAssignments=vec, numPerms=30)
getUniquePerms <- function(groupAssignments, numPerms)
{
set.seed(1)
lowest <- numPerms
if(choose(length(groupAssignments),sum(groupAssignments == 0)) < lowest){
lowest <- choose(length(groupAssignments),sum(groupAssignments == 0))
}
perms <- matrix(groupAssignments,nrow = 1, ncol = length(groupAssignments))
for(i in seq(from=1,to=lowest)){
print(i)
row <- sample(groupAssignments)
for(j in seq(from=1,to=nrow(perms))){
if(!isTRUE(all.equal(perms[j,],row))){
perms <- rbind(perms,row)
}
}
}
print(perms)
return(perms)
}
vec <- c(0,0,1)
stuff <- getUniquePerms(groupAssignments=vec, numPerms=30)
getUniquePerms <- function(groupAssignments, numPerms)
{
set.seed(1)
lowest <- numPerms
if(choose(length(groupAssignments),sum(groupAssignments == 0)) < lowest){
lowest <- choose(length(groupAssignments),sum(groupAssignments == 0))
}
perms <- matrix(groupAssignments,nrow = lowest, ncol = length(groupAssignments))
for(i in seq(from=1,to=lowest)){
print(i)
row <- sample(groupAssignments)
for(j in seq(from=1,to=nrow(perms))){
if(!isTRUE(all.equal(perms[j,],row))){
perms <- rbind(perms,row)
}
}
}
print(perms)
return(perms)
}
vec <- c(0,0,1)
stuff <- getUniquePerms(groupAssignments=vec, numPerms=30)
getUniquePerms <- function(groupAssignments, numPerms)
{
set.seed(1)
lowest <- numPerms
if(choose(length(groupAssignments),sum(groupAssignments == 0)) < lowest){
lowest <- choose(length(groupAssignments),sum(groupAssignments == 0))
}
perms <- matrix(groupAssignments,nrow = 1, ncol = length(groupAssignments))
for(i in seq(from=1,to=lowest)){
print(i)
row <- sample(groupAssignments)
for(j in seq(from=1,to=nrow(perms))){
print(paste('--',j))
if(!isTRUE(all.equal(perms[j,],row))){
perms <- rbind(perms,row)
}
}
}
print(perms)
return(perms)
}
vec <- c(0,0,1)
stuff <- getUniquePerms(groupAssignments=vec, numPerms=30)
getUniquePerms <- function(groupAssignments, numPerms)
{
set.seed(1)
lowest <- numPerms
if(choose(length(groupAssignments),sum(groupAssignments == 0)) < lowest){
lowest <- choose(length(groupAssignments),sum(groupAssignments == 0))
}
perms <- matrix(groupAssignments,nrow = 1, ncol = length(groupAssignments))
for(i in seq(from=1,to=lowest)){
print(i)
row <- sample(groupAssignments)
for(j in seq(from=1,to=nrow(perms))){
print(paste('--',j))
if(!isTRUE(all.equal(perms[j,],row))){
perms <- rbind(perms,row)
}
}
}
print(perms)
return(perms)
}
vec <- c(0,0,1)
stuff <- getUniquePerms(groupAssignments=vec, numPerms=30)
getUniquePerms <- function(groupAssignments, numPerms)
{
set.seed(1)
lowest <- numPerms
if(choose(length(groupAssignments),sum(groupAssignments == 0)) < lowest){
lowest <- choose(length(groupAssignments),sum(groupAssignments == 0))
}
perms <- matrix(groupAssignments,nrow = 1, ncol = length(groupAssignments))
for(i in seq(from=1,to=lowest)){
print(i)
row <- sample(groupAssignments)
print(row)
for(j in seq(from=1,to=nrow(perms))){
print(paste('--',j))
if(!isTRUE(all.equal(perms[j,],row))){
perms <- rbind(perms,row)
}
}
}
print(perms)
return(perms)
}
vec <- c(0,0,1)
stuff <- getUniquePerms(groupAssignments=vec, numPerms=30)
debugSource('C:/Users/Michael/OneDrive/Documents/up2.R')
debugSource('C:/Users/Michael/OneDrive/Documents/up2.R')
source('C:/Users/Michael/OneDrive/Documents/up2.R')
debugSource('C:/Users/Michael/OneDrive/Documents/up2.R')
perms
perms[1,]
!isTRUE(all.equal(perms[1,],row))
getUniquePerms <- function(groupAssignments, numPerms)
{
set.seed(1)
lowest <- numPerms
if(choose(length(groupAssignments),sum(groupAssignments == 0)) < lowest){
lowest <- choose(length(groupAssignments),sum(groupAssignments == 0))
}
perms <- matrix(,nrow = 0, ncol = length(groupAssignments))
for(i in seq(from=1,to=lowest)){
print(i)
row <- sample(groupAssignments)
print(row)
for(j in seq(from=1,to=nrow(perms))){
print(paste('--',j))
if(!isTRUE(all.equal(perms[j,],row))){
perms <- rbind(perms,row)
}
}
}
print(perms)
return(perms)
}
vec <- c(0,0,1)
stuff <- getUniquePerms(groupAssignments=vec, numPerms=30)
getUniquePerms <- function(groupAssignments, numPerms)
{
set.seed(1)
lowest <- numPerms
if(choose(length(groupAssignments),sum(groupAssignments == 0)) < lowest){
lowest <- choose(length(groupAssignments),sum(groupAssignments == 0))
}
perms <- matrix(groupAssignments,nrow = 1, ncol = length(groupAssignments))
for(i in seq(from=1,to=lowest)){
print(i)
row <- sample(groupAssignments)
print(row)
for(j in seq(from=1,to=nrow(perms))){
print(paste('--',j))
if(!isTRUE(all.equal(perms[j,],row))){
perms <- rbind(perms,row)
}
}
}
print(perms)
return(perms)
}
vec <- c(0,0,1)
stuff <- getUniquePerms(groupAssignments=vec, numPerms=30)
getUniquePerms <- function(groupAssignments, numPerms)
{
set.seed(1)
lowest <- numPerms
if(choose(length(groupAssignments),sum(groupAssignments == 0)) < lowest){
lowest <- choose(length(groupAssignments),sum(groupAssignments == 0))
}
perms <- matrix(groupAssignments,nrow = 1, ncol = length(groupAssignments))
for(i in seq(from=1,to=lowest)){
row <- sample(groupAssignments)
for(j in seq(from=1,to=nrow(perms))){
if(!isTRUE(all.equal(perms[j,],row))){
print(row)
perms <- rbind(perms,row)
}
}
}
print(perms)
return(perms)
}
vec <- c(0,0,1)
stuff <- getUniquePerms(groupAssignments=vec, numPerms=30)
getUniquePerms <- function(groupAssignments, numPerms)
{
set.seed(1)
lowest <- numPerms
if(choose(length(groupAssignments),sum(groupAssignments == 0)) < lowest){
lowest <- choose(length(groupAssignments),sum(groupAssignments == 0))
}
perms <- matrix(groupAssignments,nrow = 1, ncol = length(groupAssignments))
for(i in seq(from=1,to=lowest)){
row <- sample(groupAssignments)
found <- FALSE
for(j in seq(from=1,to=nrow(perms))){
if(isTRUE(all.equal(perms[j,],row))){
found <- TRUE
}
}
if(!found){
perms <- rbind(perms,row)
}
}
print(perms)
return(perms)
}
vec <- c(0,0,1)
stuff <- getUniquePerms(groupAssignments=vec, numPerms=30)
getUniquePerms <- function(groupAssignments, numPerms)
{
set.seed(1)
lowest <- numPerms
if(choose(length(groupAssignments),sum(groupAssignments == 0)) < lowest){
lowest <- choose(length(groupAssignments),sum(groupAssignments == 0))
}
perms <- matrix(groupAssignments,nrow = 1, ncol = length(groupAssignments))
for(i in seq(from=1,to=lowest)){
row <- sample(groupAssignments)
found <- FALSE
for(j in seq(from=1,to=nrow(perms))){
if(isTRUE(all.equal(perms[j,],row))){
found <- TRUE
}
}
if(!found){
perms <- rbind(perms,row)
}
}
return(perms)
}
vec <- c(0,0,1)
stuff <- getUniquePerms(groupAssignments=vec, numPerms=30)
checkOutput <- function(data, numCases, expectedNumMatches, original)
{
suppressWarnings(suppressPackageStartupMessages(library(data.table)))
a <- dim(unique(as.data.table(data)))
b <- dim(data)
print("Checking uniqueness")
if (!(all(a==b)))
{
print(a)
print(b)
print(data)
print(data[which(duplicated(as.data.table(data))),])
stop("Failed 1")
}
print("Verifying that all rows have the correct number of cases")
uniqueNumOnes <- unique(apply(data, 1, sum))
if (uniqueNumOnes != numCases)
{
print(uniqueNumOnes)
stop("Failed 2 ")
}
print("Verifying that all rows have the same number of cases")
if (length(uniqueNumOnes) != 1)
{
print(uniqueNumOnes)
stop("Failed 3 ")
}
print("Verifying that the output is the correct size")
if (nrow(data) != expectedNumMatches){
print(nrow(data))
stop("Failed 4")
}
print("Verifying that the original vector is not in the output")
for (i in 1:nrow(data))
{
if (all(original == data[i,]))
stop("Failed 5")
# For now we only check the first row because takes too long to check all (for now)
#break
}
print("Passed all tests!!")
}
caseControlStatus <- c(1, 1, 1, 1, 1, 0, 0, 0, 0, 0)
caseControlStatusBig <- c(rep(1, 100), rep(0, 900))
test0 <- getUniquePerms(caseControlStatus, 5)
test1 <- getUniquePerms(caseControlStatus, 100)
test2 <- getUniquePerms(caseControlStatus, 10000)
ptm <- proc.time()
test3 <- getUniquePerms(caseControlStatusBig, 1000000)
checkOutput <- function(data, numCases, expectedNumMatches, original)
{
suppressWarnings(suppressPackageStartupMessages(library(data.table)))
a <- dim(unique(as.data.table(data)))
b <- dim(data)
print("Checking uniqueness")
if (!(all(a==b)))
{
print(a)
print(b)
print(data)
print(data[which(duplicated(as.data.table(data))),])
stop("Failed 1")
}
print("Verifying that all rows have the correct number of cases")
uniqueNumOnes <- unique(apply(data, 1, sum))
if (uniqueNumOnes != numCases)
{
print(uniqueNumOnes)
stop("Failed 2 ")
}
print("Verifying that all rows have the same number of cases")
if (length(uniqueNumOnes) != 1)
{
print(uniqueNumOnes)
stop("Failed 3 ")
}
print("Verifying that the output is the correct size")
if (nrow(data) != expectedNumMatches){
print(nrow(data))
stop("Failed 4")
}
print("Verifying that the original vector is not in the output")
for (i in 1:nrow(data))
{
if (all(original == data[i,]))
stop("Failed 5")
# For now we only check the first row because takes too long to check all (for now)
#break
}
print("Passed all tests!!")
}
caseControlStatus <- c(1, 1, 1, 1, 1, 0, 0, 0, 0, 0)
caseControlStatusBig <- c(rep(1, 100), rep(0, 900))
test0 <- getUniquePerms(caseControlStatus, 5)
test1 <- getUniquePerms(caseControlStatus, 100)
test2 <- getUniquePerms(caseControlStatus, 10000)
ptm <- proc.time()
#test3 <- getUniquePerms(caseControlStatusBig, 1000000)
print(proc.time() - ptm)
checkOutput(test0, 5, 5, caseControlStatus)
caseControlStatus <- c(1, 1, 1, 1, 1, 0, 0, 0, 0, 0)
stuff <- getUniquePerms(groupAssignments=caseControlStatus, numPerms=5)
stuff
getUniquePerms <- function(groupAssignments, numPerms)
{
set.seed(1)
lowest <- numPerms
if(choose(length(groupAssignments),sum(groupAssignments == 0)) < lowest){
lowest <- choose(length(groupAssignments),sum(groupAssignments == 0))
}
perms <- matrix(groupAssignments,nrow = 1, ncol = length(groupAssignments))
for(i in seq(from=1,to=lowest)){
row <- sample(groupAssignments)
found <- FALSE
for(j in seq(from=1,to=nrow(perms))){
if(isTRUE(all.equal(perms[j,],row))){
found <- TRUE
}
}
if(!found){
perms <- rbind(perms,row)
}
}
perms <- perms[2:nrow(perms),1:ncol(perms)]
return(perms)
}
vec <- c(0,0,1)
caseControlStatus <- c(1, 1, 1, 1, 1, 0, 0, 0, 0, 0)
stuff <- getUniquePerms(groupAssignments=caseControlStatus, numPerms=5)
stuff
checkOutput <- function(data, numCases, expectedNumMatches, original)
{
suppressWarnings(suppressPackageStartupMessages(library(data.table)))
a <- dim(unique(as.data.table(data)))
b <- dim(data)
print("Checking uniqueness")
if (!(all(a==b)))
{
print(a)
print(b)
print(data)
print(data[which(duplicated(as.data.table(data))),])
stop("Failed 1")
}
print("Verifying that all rows have the correct number of cases")
uniqueNumOnes <- unique(apply(data, 1, sum))
if (uniqueNumOnes != numCases)
{
print(uniqueNumOnes)
stop("Failed 2 ")
}
print("Verifying that all rows have the same number of cases")
if (length(uniqueNumOnes) != 1)
{
print(uniqueNumOnes)
stop("Failed 3 ")
}
print("Verifying that the output is the correct size")
if (nrow(data) != expectedNumMatches){
print(nrow(data))
stop("Failed 4")
}
print("Verifying that the original vector is not in the output")
for (i in 1:nrow(data))
{
if (all(original == data[i,]))
stop("Failed 5")
# For now we only check the first row because takes too long to check all (for now)
#break
}
print("Passed all tests!!")
}
caseControlStatus <- c(1, 1, 1, 1, 1, 0, 0, 0, 0, 0)
caseControlStatusBig <- c(rep(1, 100), rep(0, 900))
test0 <- getUniquePerms(caseControlStatus, 5)
test1 <- getUniquePerms(caseControlStatus, 100)
test2 <- getUniquePerms(caseControlStatus, 10000)
ptm <- proc.time()
#test3 <- getUniquePerms(caseControlStatusBig, 1000000)
print(proc.time() - ptm)
checkOutput(test0, 5, 5, caseControlStatus)
checkOutput(test1, 5, 100, caseControlStatus)
data <- read.table('/8802/pileup.pileup', sep = " " , header = F, stringsAsFactors= F)
getwd()
data <- read.table('465Lichen/8802/pileup.pileup', sep = " " , header = F, stringsAsFactors= F)
data
getwd()
data <- read_tsv('8802/pileup.pileup')
library(tibble)
library(readr)
library(dplyr)
library(plotrix)
setwd('C:/Users/Michael/Documents/Variance')
data <- read_tsv('8802/pileup.pileup')
