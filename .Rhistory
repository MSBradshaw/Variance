{
set.seed(1)
lowest <- numPerms
if(choose(length(groupAssignments),sum(groupAssignments == 0)) < lowest){
lowest <- choose(length(groupAssignments),sum(groupAssignments == 0))
}
perms <- matrix(groupAssignments,nrow = 1, ncol = length(groupAssignments))
for(i in seq(from=1,to=lowest)){
print(i)
row <- sample(groupAssignments)
print(row)
for(j in seq(from=1,to=nrow(perms))){
print(paste('--',j))
if(!isTRUE(all.equal(perms[j,],row))){
perms <- rbind(perms,row)
}
}
}
print(perms)
return(perms)
}
vec <- c(0,0,1)
stuff <- getUniquePerms(groupAssignments=vec, numPerms=30)
debugSource('C:/Users/Michael/OneDrive/Documents/up2.R')
debugSource('C:/Users/Michael/OneDrive/Documents/up2.R')
source('C:/Users/Michael/OneDrive/Documents/up2.R')
debugSource('C:/Users/Michael/OneDrive/Documents/up2.R')
perms
perms[1,]
!isTRUE(all.equal(perms[1,],row))
getUniquePerms <- function(groupAssignments, numPerms)
{
set.seed(1)
lowest <- numPerms
if(choose(length(groupAssignments),sum(groupAssignments == 0)) < lowest){
lowest <- choose(length(groupAssignments),sum(groupAssignments == 0))
}
perms <- matrix(,nrow = 0, ncol = length(groupAssignments))
for(i in seq(from=1,to=lowest)){
print(i)
row <- sample(groupAssignments)
print(row)
for(j in seq(from=1,to=nrow(perms))){
print(paste('--',j))
if(!isTRUE(all.equal(perms[j,],row))){
perms <- rbind(perms,row)
}
}
}
print(perms)
return(perms)
}
vec <- c(0,0,1)
stuff <- getUniquePerms(groupAssignments=vec, numPerms=30)
getUniquePerms <- function(groupAssignments, numPerms)
{
set.seed(1)
lowest <- numPerms
if(choose(length(groupAssignments),sum(groupAssignments == 0)) < lowest){
lowest <- choose(length(groupAssignments),sum(groupAssignments == 0))
}
perms <- matrix(groupAssignments,nrow = 1, ncol = length(groupAssignments))
for(i in seq(from=1,to=lowest)){
print(i)
row <- sample(groupAssignments)
print(row)
for(j in seq(from=1,to=nrow(perms))){
print(paste('--',j))
if(!isTRUE(all.equal(perms[j,],row))){
perms <- rbind(perms,row)
}
}
}
print(perms)
return(perms)
}
vec <- c(0,0,1)
stuff <- getUniquePerms(groupAssignments=vec, numPerms=30)
getUniquePerms <- function(groupAssignments, numPerms)
{
set.seed(1)
lowest <- numPerms
if(choose(length(groupAssignments),sum(groupAssignments == 0)) < lowest){
lowest <- choose(length(groupAssignments),sum(groupAssignments == 0))
}
perms <- matrix(groupAssignments,nrow = 1, ncol = length(groupAssignments))
for(i in seq(from=1,to=lowest)){
row <- sample(groupAssignments)
for(j in seq(from=1,to=nrow(perms))){
if(!isTRUE(all.equal(perms[j,],row))){
print(row)
perms <- rbind(perms,row)
}
}
}
print(perms)
return(perms)
}
vec <- c(0,0,1)
stuff <- getUniquePerms(groupAssignments=vec, numPerms=30)
getUniquePerms <- function(groupAssignments, numPerms)
{
set.seed(1)
lowest <- numPerms
if(choose(length(groupAssignments),sum(groupAssignments == 0)) < lowest){
lowest <- choose(length(groupAssignments),sum(groupAssignments == 0))
}
perms <- matrix(groupAssignments,nrow = 1, ncol = length(groupAssignments))
for(i in seq(from=1,to=lowest)){
row <- sample(groupAssignments)
found <- FALSE
for(j in seq(from=1,to=nrow(perms))){
if(isTRUE(all.equal(perms[j,],row))){
found <- TRUE
}
}
if(!found){
perms <- rbind(perms,row)
}
}
print(perms)
return(perms)
}
vec <- c(0,0,1)
stuff <- getUniquePerms(groupAssignments=vec, numPerms=30)
getUniquePerms <- function(groupAssignments, numPerms)
{
set.seed(1)
lowest <- numPerms
if(choose(length(groupAssignments),sum(groupAssignments == 0)) < lowest){
lowest <- choose(length(groupAssignments),sum(groupAssignments == 0))
}
perms <- matrix(groupAssignments,nrow = 1, ncol = length(groupAssignments))
for(i in seq(from=1,to=lowest)){
row <- sample(groupAssignments)
found <- FALSE
for(j in seq(from=1,to=nrow(perms))){
if(isTRUE(all.equal(perms[j,],row))){
found <- TRUE
}
}
if(!found){
perms <- rbind(perms,row)
}
}
return(perms)
}
vec <- c(0,0,1)
stuff <- getUniquePerms(groupAssignments=vec, numPerms=30)
checkOutput <- function(data, numCases, expectedNumMatches, original)
{
suppressWarnings(suppressPackageStartupMessages(library(data.table)))
a <- dim(unique(as.data.table(data)))
b <- dim(data)
print("Checking uniqueness")
if (!(all(a==b)))
{
print(a)
print(b)
print(data)
print(data[which(duplicated(as.data.table(data))),])
stop("Failed 1")
}
print("Verifying that all rows have the correct number of cases")
uniqueNumOnes <- unique(apply(data, 1, sum))
if (uniqueNumOnes != numCases)
{
print(uniqueNumOnes)
stop("Failed 2 ")
}
print("Verifying that all rows have the same number of cases")
if (length(uniqueNumOnes) != 1)
{
print(uniqueNumOnes)
stop("Failed 3 ")
}
print("Verifying that the output is the correct size")
if (nrow(data) != expectedNumMatches){
print(nrow(data))
stop("Failed 4")
}
print("Verifying that the original vector is not in the output")
for (i in 1:nrow(data))
{
if (all(original == data[i,]))
stop("Failed 5")
# For now we only check the first row because takes too long to check all (for now)
#break
}
print("Passed all tests!!")
}
caseControlStatus <- c(1, 1, 1, 1, 1, 0, 0, 0, 0, 0)
caseControlStatusBig <- c(rep(1, 100), rep(0, 900))
test0 <- getUniquePerms(caseControlStatus, 5)
test1 <- getUniquePerms(caseControlStatus, 100)
test2 <- getUniquePerms(caseControlStatus, 10000)
ptm <- proc.time()
test3 <- getUniquePerms(caseControlStatusBig, 1000000)
checkOutput <- function(data, numCases, expectedNumMatches, original)
{
suppressWarnings(suppressPackageStartupMessages(library(data.table)))
a <- dim(unique(as.data.table(data)))
b <- dim(data)
print("Checking uniqueness")
if (!(all(a==b)))
{
print(a)
print(b)
print(data)
print(data[which(duplicated(as.data.table(data))),])
stop("Failed 1")
}
print("Verifying that all rows have the correct number of cases")
uniqueNumOnes <- unique(apply(data, 1, sum))
if (uniqueNumOnes != numCases)
{
print(uniqueNumOnes)
stop("Failed 2 ")
}
print("Verifying that all rows have the same number of cases")
if (length(uniqueNumOnes) != 1)
{
print(uniqueNumOnes)
stop("Failed 3 ")
}
print("Verifying that the output is the correct size")
if (nrow(data) != expectedNumMatches){
print(nrow(data))
stop("Failed 4")
}
print("Verifying that the original vector is not in the output")
for (i in 1:nrow(data))
{
if (all(original == data[i,]))
stop("Failed 5")
# For now we only check the first row because takes too long to check all (for now)
#break
}
print("Passed all tests!!")
}
caseControlStatus <- c(1, 1, 1, 1, 1, 0, 0, 0, 0, 0)
caseControlStatusBig <- c(rep(1, 100), rep(0, 900))
test0 <- getUniquePerms(caseControlStatus, 5)
test1 <- getUniquePerms(caseControlStatus, 100)
test2 <- getUniquePerms(caseControlStatus, 10000)
ptm <- proc.time()
#test3 <- getUniquePerms(caseControlStatusBig, 1000000)
print(proc.time() - ptm)
checkOutput(test0, 5, 5, caseControlStatus)
caseControlStatus <- c(1, 1, 1, 1, 1, 0, 0, 0, 0, 0)
stuff <- getUniquePerms(groupAssignments=caseControlStatus, numPerms=5)
stuff
getUniquePerms <- function(groupAssignments, numPerms)
{
set.seed(1)
lowest <- numPerms
if(choose(length(groupAssignments),sum(groupAssignments == 0)) < lowest){
lowest <- choose(length(groupAssignments),sum(groupAssignments == 0))
}
perms <- matrix(groupAssignments,nrow = 1, ncol = length(groupAssignments))
for(i in seq(from=1,to=lowest)){
row <- sample(groupAssignments)
found <- FALSE
for(j in seq(from=1,to=nrow(perms))){
if(isTRUE(all.equal(perms[j,],row))){
found <- TRUE
}
}
if(!found){
perms <- rbind(perms,row)
}
}
perms <- perms[2:nrow(perms),1:ncol(perms)]
return(perms)
}
vec <- c(0,0,1)
caseControlStatus <- c(1, 1, 1, 1, 1, 0, 0, 0, 0, 0)
stuff <- getUniquePerms(groupAssignments=caseControlStatus, numPerms=5)
stuff
checkOutput <- function(data, numCases, expectedNumMatches, original)
{
suppressWarnings(suppressPackageStartupMessages(library(data.table)))
a <- dim(unique(as.data.table(data)))
b <- dim(data)
print("Checking uniqueness")
if (!(all(a==b)))
{
print(a)
print(b)
print(data)
print(data[which(duplicated(as.data.table(data))),])
stop("Failed 1")
}
print("Verifying that all rows have the correct number of cases")
uniqueNumOnes <- unique(apply(data, 1, sum))
if (uniqueNumOnes != numCases)
{
print(uniqueNumOnes)
stop("Failed 2 ")
}
print("Verifying that all rows have the same number of cases")
if (length(uniqueNumOnes) != 1)
{
print(uniqueNumOnes)
stop("Failed 3 ")
}
print("Verifying that the output is the correct size")
if (nrow(data) != expectedNumMatches){
print(nrow(data))
stop("Failed 4")
}
print("Verifying that the original vector is not in the output")
for (i in 1:nrow(data))
{
if (all(original == data[i,]))
stop("Failed 5")
# For now we only check the first row because takes too long to check all (for now)
#break
}
print("Passed all tests!!")
}
caseControlStatus <- c(1, 1, 1, 1, 1, 0, 0, 0, 0, 0)
caseControlStatusBig <- c(rep(1, 100), rep(0, 900))
test0 <- getUniquePerms(caseControlStatus, 5)
test1 <- getUniquePerms(caseControlStatus, 100)
test2 <- getUniquePerms(caseControlStatus, 10000)
ptm <- proc.time()
#test3 <- getUniquePerms(caseControlStatusBig, 1000000)
print(proc.time() - ptm)
checkOutput(test0, 5, 5, caseControlStatus)
checkOutput(test1, 5, 100, caseControlStatus)
library(shiny); runApp('Weather/shiny-quickstart-1/downloads/code/weatherApp.R')
runApp('Weather/shiny-quickstart-1/downloads/code/weatherApp.R')
runApp('Weather/shiny-quickstart-1/downloads/code/weatherApp.R')
runApp('Weather/shiny-quickstart-1/downloads/code/weatherApp.R')
runApp('Weather/shiny-quickstart-1/downloads/code/weatherApp.R')
runApp('Weather/shiny-quickstart-1/downloads/code/weatherApp.R')
results
runApp('Weather/shiny-quickstart-1/downloads/code/weatherApp.R')
compressed
bound
runApp('Weather/shiny-quickstart-1/downloads/code/weatherApp.R')
runApp('Weather/shiny-quickstart-1/downloads/code/weatherApp.R')
runApp('Weather/shiny-quickstart-1/downloads/code/weatherApp.R')
R.Version()
library(shiny); runApp('Weather/shiny-quickstart-1/downloads/code/weatherApp.R')
install.packages('dplyr')
runApp('Weather/shiny-quickstart-1/downloads/code/weatherApp.R')
install.packages('tidyverse')
install.packages("tidyverse")
library(shiny); runApp('Weather/shiny-quickstart-1/downloads/code/weatherApp.R')
install.packages('plotrix')
runApp('Weather/shiny-quickstart-1/downloads/code/weatherApp.R')
compressed
bound
runApp('Weather/shiny-quickstart-1/downloads/code/weatherApp.R')
bound
runApp('Weather/shiny-quickstart-1/downloads/code/weatherApp.R')
runApp('Weather/shiny-quickstart-1/downloads/code/weatherApp.R')
runApp('Weather/shiny-quickstart-1/downloads/code/weatherApp.R')
runApp('Weather/shiny-quickstart-1/downloads/code/weatherApp.R')
bound
input$amount_of_time
runApp('Weather/shiny-quickstart-1/downloads/code/weatherApp.R')
runApp('Weather/shiny-quickstart-1/downloads/code/weatherApp.R')
bouns
bound
compressed
compressed$f1
compressed$f2
error_bars
error_bars2
error_bars_2
runApp('Weather/shiny-quickstart-1/downloads/code/weatherApp.R')
?stat_compare_means
??stat_compare_means
runApp('Weather/shiny-quickstart-1/downloads/code/weatherApp.R')
comrpessed
compressed
xy.list <- split(compressed, seq(nrow(compressed)))
xy.list
xy.list[1]
xy.list <- split(as.data.frame(compressed, seq(nrow(compressed))))
xy.list <- split(as.data.frame(compressed), seq(nrow(compressed)))
xy.list
xy.list[1]
runApp('Weather/shiny-quickstart-1/downloads/code/weatherApp.R')
install.packages(ggpubr)
install.packages('ggpubr')
runApp('Weather/shiny-quickstart-1/downloads/code/weatherApp.R')
runApp('Weather/shiny-quickstart-1/downloads/code/weatherApp.R')
runApp('Weather/shiny-quickstart-1/downloads/code/weatherApp.R')
runApp('Weather/shiny-quickstart-1/downloads/code/weatherApp.R')
runApp('Weather/shiny-quickstart-1/downloads/code/weatherApp.R')
runApp('Weather/shiny-quickstart-1/downloads/code/weatherApp.R')
runApp('Weather/shiny-quickstart-1/downloads/code/weatherApp.R')
t.test(compressed, paired = TRUE)
t.test(compressed$f1, compressed$f2, paired = TRUE)
nrow(compressed$f1)
nrow(compressed$f2)
compressed
compressed$f1
length(compressed$f1)
runApp('Weather/shiny-quickstart-1/downloads/code/weatherApp.R')
t.test(compressed,paired = TRUE)
t.test(compressed$f1, compressed$f2, paired = TRUE)
runApp('Weather/shiny-quickstart-1/downloads/code/weatherApp.R')
t.test(compressed$f1, compressed$f2, paired = TRUE)
runApp('Weather/shiny-quickstart-1/downloads/code/weatherApp.R')
subset
nums <- c(1,1,1,1,1,1,1,1,1,1,1,0.891860465,0.876300578,0.934104046,0.94566474,0.899421965,0.903488372,0.899421965,0.905202312,0.853179191,0.893641618)
group <- c(rep('test',10),rep('train',10))
length(group)
length(nums)
length(nums)
nums <- c(1,1,1,1,1,1,1,1,1,1,0.891860465,0.876300578,0.934104046,0.94566474,0.899421965,0.903488372,0.899421965,0.905202312,0.853179191,0.893641618)
group <- c(rep('test',10),rep('train',10))
fold <- c(seq(1:10),seq(1:10))
length(fold)
length(group)
length(data)
length(nums)
data <- rbind(nums,group,fold)
data
data <- read_csv(cars.csv)
getwd()
set
data <- read_csv(cars.csv)
library(ggplot2)
library(tibble)
library(readr)
library(dplyr)
library(plotrix)
data <- read_csv(cars.csv)
getwd()
data <- read_csv('cars.csv')
data
ggplot(data = data, aes(x = Fold, y = Accuracy, color = Group )) +
geom_line()
data <- read_csv('cars.csv')
ggplot(data = data, aes(x = Fold, y = Accuracy, color = Group )) +
geom_line()
ggplot(data = data, aes(x = Fold, y = Accuracy, color = Group )) +
geom_line() + xlab('Fold') + ylab('Accuracy') + ggtitle('Cars Data Set')
data <- read_csv('voting.csv')
#x is being set equal to the column name of the data thye want to plot
ggplot(data = data, aes(x = Fold, y = Accuracy, color = Group )) +
geom_line() + xlab('Fold') + ylab('Accuracy') + ggtitle('Voting Data Set')
library(tibble)
library(readr)
library(dplyr)
library(plotrix)
#biocLite('Rsamtools')
library(Rsamtools)
#pileup <- readPileup('8802/pileup.pileup')
setwd('C:/Users/Michael/Documents/Variance')
data <- read_tsv('8802/pileup.pileup')
colnames(data) <- c('name','position','bp','depth','info','quality')
data
for( i in seq(1,nrow(data))){
#get the current base
base = data$bp[i]
string <- strsplit(data$info[i], "")[[1]]
As <- 0
Cs <- 0
Ts <- 0
Gs <- 0
for( char in string){
if(char %in% c('A','a') | data$bp[i] %in% c('A','a')) {
As <- As + 1
}else if(char %in% c('C','c') | data$bp[i] %in% c('C','c')){
Cs <- Cs + 1
}else if(char %in% c('T','t') | data$bp[i] %in% c('T','t')){
Ts <- Ts + 1
}else if(char %in% c('G','g') | data$bp[i] %in% c('T','g')){
Gs <- Gs + 1
}
}
thing <- 0
}
data#bp[]
string <- strsplit(data$info[i], "")[[1]]
debugSource('~/Variance/parsepileup.R')
debugSource('~/Variance/parsepileup.R')
As
Cs
Gs
Ts
?read_csv
debugSource('~/Variance/parsepileup.R')
As
Ts
Cs
Gs
debugSource('~/Variance/parsepileup.R')
debugSource('~/Variance/parsepileup.R')
debugSource('~/Variance/parsepileup.R')
Ts
As
Gs
Cs
thing <- matrix(, nrow = 0, ncol = 4)
things
thing
a = c(0,0,1,0)
rbind(thing,a)
thing
source('~/Variance/parsepileup.R')
source('~/Variance/parsepileup.R')
bp_info
source('~/Variance/parsepileup.R')
bp_info
