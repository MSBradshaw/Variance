getwd()
set
data <- read_csv(cars.csv)
library(ggplot2)
library(tibble)
library(readr)
library(dplyr)
library(plotrix)
data <- read_csv(cars.csv)
getwd()
data <- read_csv('cars.csv')
data
ggplot(data = data, aes(x = Fold, y = Accuracy, color = Group )) +
geom_line()
data <- read_csv('cars.csv')
ggplot(data = data, aes(x = Fold, y = Accuracy, color = Group )) +
geom_line()
ggplot(data = data, aes(x = Fold, y = Accuracy, color = Group )) +
geom_line() + xlab('Fold') + ylab('Accuracy') + ggtitle('Cars Data Set')
data <- read_csv('voting.csv')
#x is being set equal to the column name of the data thye want to plot
ggplot(data = data, aes(x = Fold, y = Accuracy, color = Group )) +
geom_line() + xlab('Fold') + ylab('Accuracy') + ggtitle('Voting Data Set')
library(shiny); runApp('Weather/shiny-quickstart-1/downloads/code/weatherApp.R')
runApp('Weather/shiny-quickstart-1/downloads/code/weatherApp.R')
runApp('Weather/shiny-quickstart-1/downloads/code/weatherApp.R')
runApp('Weather/shiny-quickstart-1/downloads/code/weatherApp.R')
runApp('Weather/shiny-quickstart-1/downloads/code/weatherApp.R')
runApp('Weather/shiny-quickstart-1/downloads/code/weatherApp.R')
runApp('Weather/shiny-quickstart-1/downloads/code/weatherApp.R')
runApp('Weather/shiny-quickstart-1/downloads/code/weatherApp.R')
runApp('Weather/shiny-quickstart-1/downloads/code/weatherApp.R')
runApp('Weather/shiny-quickstart-1/downloads/code/weatherApp.R')
runApp('Weather/shiny-quickstart-1/downloads/code/weatherApp.R')
runApp('Weather/shiny-quickstart-1/downloads/code/weatherApp.R')
runApp('Weather/shiny-quickstart-1/downloads/code/weatherApp.R')
runApp('Weather/shiny-quickstart-1/downloads/code/weatherApp.R')
runApp('Weather/shiny-quickstart-1/downloads/code/weatherApp.R')
runApp('Weather/shiny-quickstart-1/downloads/code/weatherApp.R')
runApp('Weather/shiny-quickstart-1/downloads/code/weatherApp.R')
runApp('Weather/shiny-quickstart-1/downloads/code/weatherApp.R')
runApp('Weather/shiny-quickstart-1/downloads/code/weatherApp.R')
runApp('Weather/shiny-quickstart-1/downloads/code/weatherApp.R')
Q
runApp('Weather/shiny-quickstart-1/downloads/code/weatherApp.R')
runApp('Weather/shiny-quickstart-1/downloads/code/weatherApp.R')
runApp('Weather/shiny-quickstart-1/downloads/code/weatherApp.R')
runApp('Weather/shiny-quickstart-1/downloads/code/weatherApp.R')
runApp('Weather/shiny-quickstart-1/downloads/code/weatherApp.R')
runApp('Weather/shiny-quickstart-1/downloads/code/weatherApp.R')
runApp('Weather/shiny-quickstart-1/downloads/code/weatherApp.R')
runApp('Weather/shiny-quickstart-1/downloads/code/weatherApp.R')
runApp('Weather/shiny-quickstart-1/downloads/code/weatherApp.R')
runApp('Weather/shiny-quickstart-1/downloads/code/weatherApp.R')
runApp('Weather/shiny-quickstart-1/downloads/code/weatherApp.R')
infile_1()
names
names[2]
runApp('Weather/shiny-quickstart-1/downloads/code/weatherApp.R')
?selectInput
runApp('Weather/shiny-quickstart-1/downloads/code/weatherApp.R')
thigns
runApp('Weather/shiny-quickstart-1/downloads/code/weatherApp.R')
runApp('Weather/shiny-quickstart-1/downloads/code/weatherApp.R')
runApp('Weather/shiny-quickstart-1/downloads/code/weatherApp.R')
runApp('Weather/shiny-quickstart-1/downloads/code/weatherApp.R')
runApp('Weather/shiny-quickstart-1/downloads/code/weatherApp.R')
runApp('Weather/shiny-quickstart-1/downloads/code/weatherApp.R')
runApp('Weather/shiny-quickstart-1/downloads/code/weatherApp.R')
runApp('Weather/shiny-quickstart-1/downloads/code/weatherApp.R')
class(names)
class(thigns)
names
thigns
runApp('Weather/shiny-quickstart-1/downloads/code/weatherApp.R')
runApp('Weather/shiny-quickstart-1/downloads/code/weatherApp.R')
infile_
infile_1
infile_1()
runApp('Weather/shiny-quickstart-1/downloads/code/weatherApp.R')
thigns
thigns[1:5]
thigns <- thigns[1:5]
runApp('Weather/shiny-quickstart-1/downloads/code/weatherApp.R')
runApp('Weather/shiny-quickstart-1/downloads/code/weatherApp.R')
runApp('Weather/shiny-quickstart-1/downloads/code/weatherApp.R')
thigns
class(thigns)
class(colnames(infile_1()))
dumbNames <- colnames(infile_1())
runApp('Weather/shiny-quickstart-1/downloads/code/weatherApp.R')
dumb <- colnames(infile_1())
library(shiny); runApp('Weather/shiny-quickstart-1/downloads/code/weatherApp.R')
joined
colnames(joined)
colnames(joined)
runApp('Weather/shiny-quickstart-1/downloads/code/weatherApp.R')
runApp('Weather/shiny-quickstart-1/downloads/code/weatherApp.R')
runApp('Weather/shiny-quickstart-1/downloads/code/weatherApp.R')
runApp('Weather/shiny-quickstart-1/downloads/code/weatherApp.R')
number_of_rows
nrow(selected_info)
increment
nrow(selected_info)/increment
number_of_rows
number_of_rows
runApp('Weather/shiny-quickstart-1/downloads/code/weatherApp.R')
class(feature1)
runApp('Weather/shiny-quickstart-1/downloads/code/weatherApp.R')
runApp('Weather/shiny-quickstart-1/downloads/code/weatherApp.R')
runApp('Weather/shiny-quickstart-1/downloads/code/weatherApp.R')
runApp('Weather/shiny-quickstart-1/downloads/code/weatherApp.R')
runApp('Weather/shiny-quickstart-1/downloads/code/weatherApp.R')
colnames(joined)
colnames(joined)
selection_number
runApp('Weather/shiny-quickstart-1/downloads/code/weatherApp.R')
runApp('Weather/shiny-quickstart-1/downloads/code/weatherApp.R')
runApp('Weather/shiny-quickstart-1/downloads/code/weatherApp.R')
for( i in seq(1,nrow(data))){
#get the current base
base = data$bp[i]
string <- strsplit(data$info[i], "")[[1]]
As <- 0
Cs <- 0
Ts <- 0
Gs <- 0
for( char in string){
if(char %in% c('A','a') | data$bp[i] %in% c('A','a')) {
As <- As + 1
}else if(char %in% c('C','c') | (data$bp[i] %in% c('C','c')  & char %in% c('.',',','') )){
Cs <- Cs + 1
}else if(char %in% c('T','t') | (data$bp[i] %in% c('T','t')  & char %in% c('.',',','') )){
Ts <- Ts + 1
}else if(char %in% c('G','g') | (data$bp[i] %in% c('G','g')  & char %in% c('.',',','') )  ){
Gs <- Gs + 1
}
}
bp_info <- rbind(bp_info, c(As,Cs,Gs,Ts))
}
library(tibble)
library(readr)
library(dplyr)
library(plotrix)
#biocLite('Rsamtools')
#pileup <- readPileup('8802/pileup.pileup')
setwd('C:/Users/Michael/Documents/Variance')
data <- read_tsv('8802/pileup.pileup',col_names = FALSE)
colnames(data) <- c('name','position','bp','depth','info','quality')
bp_info <- matrix(, nrow = 0, ncol = 4)
for( i in seq(1,nrow(data))){
#get the current base
base = data$bp[i]
string <- strsplit(data$info[i], "")[[1]]
As <- 0
Cs <- 0
Ts <- 0
Gs <- 0
for( char in string){
if(char %in% c('A','a') | data$bp[i] %in% c('A','a')) {
As <- As + 1
}else if(char %in% c('C','c') | (data$bp[i] %in% c('C','c')  & char %in% c('.',',','') )){
Cs <- Cs + 1
}else if(char %in% c('T','t') | (data$bp[i] %in% c('T','t')  & char %in% c('.',',','') )){
Ts <- Ts + 1
}else if(char %in% c('G','g') | (data$bp[i] %in% c('G','g')  & char %in% c('.',',','') )  ){
Gs <- Gs + 1
}
}
bp_info <- rbind(bp_info, c(As,Cs,Gs,Ts))
}
bp_info
a <- c(0,1,2,3)
which.max(a)
library(tibble)
library(readr)
library(dplyr)
library(plotrix)
#biocLite('Rsamtools')
#Thymine	6	YELLOW
#Adenine	6	BLUE
#Cytosine	6	RED
#Guanine	6	GREEN
#pileup <- readPileup('8802/pileup.pileup')
setwd('C:/Users/Michael/Documents/Variance')
data <- read_tsv('8802/pileup.pileup',col_names = FALSE)
colnames(data) <- c('name','position','bp','depth','info','quality')
#return a matrix of the bp
get_bp_info <- function(data){
bp_info <- matrix(, nrow = 0, ncol = 4)
for( i in seq(1,nrow(data))){
base = data$bp[i]
string <- strsplit(data$info[i], "")[[1]]
As <- 0
Cs <- 0
Ts <- 0
Gs <- 0
for( char in string){
if(char %in% c('A','a') | data$bp[i] %in% c('A','a')) {
As <- As + 1
}else if(char %in% c('C','c') | (data$bp[i] %in% c('C','c')  & char %in% c('.',',','') )){
Cs <- Cs + 1
}else if(char %in% c('T','t') | (data$bp[i] %in% c('T','t')  & char %in% c('.',',','') )){
Ts <- Ts + 1
}else if(char %in% c('G','g') | (data$bp[i] %in% c('G','g')  & char %in% c('.',',','') )  ){
Gs <- Gs + 1
}
}
bp_info <- rbind(bp_info, c(As,Cs,Gs,Ts))
}
return(bp_info)
}
#generate the sequence
create_svg_string <- function(bp_info){
x_count <- 10
output <- '<svg>'
for( i in seq(1,nrow(bp_info))){
#get the most common bp
index <- which.max(bp_info[i,])
if(index == 1){
color = 'blue'
}else if (index  == 2){
color = 'red'
}else if (index == 3){
color = 'green'
}else if ( index == 4 ){
color <- 'yellow'
}
line <- paste('<rect class="hover_me" x="', x_count ,'" y="10" width="10" height="20" fill= "', color, '"/>\n')
output <- paste(output, line)
}
output <- paste(output, '</svg>')
return(output)
}
string <- get_bp_info(data)
svg <- crate_svg_string(string)
fileConn<-file("output.txt")
writeLines(svg, fileConn)
close(fileConn)
svg
svg_item <- crate_svg_string(string)
svg_item <- create_svg_string(string)
svg_item
fileConn<-file("output.txt")
writeLines(svg_item, fileConn)
close(fileConn)
#generate the sequence
create_svg_string <- function(bp_info){
x_count <- 10
output <- '<!DOCTYPE html>\n<html>\n<head>\n<meta charset="UTF-8">\n<title>title</title>\n</head>\n
<body>
<style>
.hover_me:hover{
fill: green;
}
</style><svg>'
for( i in seq(1,nrow(bp_info))){
#get the most common bp
index <- which.max(bp_info[i,])
if(index == 1){
color = 'blue'
}else if (index  == 2){
color = 'red'
}else if (index == 3){
color = 'green'
}else if ( index == 4 ){
color <- 'yellow'
}
line <- paste('<rect class="hover_me" x="', x_count ,'" y="10" width="10" height="20" fill= "', color, '"/>\n')
output <- paste(output, line)
x_count <- x_count + 10
}
output <- paste(output, '</svg>\n</body>\n</html>')
return(output)
}
string <- get_bp_info(data)
svg_item <- create_svg_string(string)
fileConn<-file("output.html")
writeLines(svg_item, fileConn)
close(fileConn)
svg_item <- create_svg_string(string)
fileConn<-file("output.html")
writeLines(svg_item, fileConn)
close(fileConn)
#generate the sequence
create_svg_string <- function(bp_info){
x_count <- 10
output <- '<!DOCTYPE html>\n<html>\n<head>\n<meta charset="UTF-8">\n<title>title</title>\n</head>\n
<body>
<style>
.hover_me{
}
.hover_me:hover{
fill: green;
}
</style><svg>'
for( i in seq(1,nrow(bp_info))){
#get the most common bp
index <- which.max(bp_info[i,])
if(index == 1){
color = 'blue'
}else if (index  == 2){
color = 'red'
}else if (index == 3){
color = 'green'
}else if ( index == 4 ){
color <- 'yellow'
}
line <- paste('<rect class="hover_me" x="', x_count ,'" y="10" width="10" height="20" stroke="black" fill= "', color, '"/>\n')
output <- paste(output, line)
x_count <- x_count + 10
}
output <- paste(output, '</svg>\n</body>\n</html>')
return(output)
}
string <- get_bp_info(data)
svg_item <- create_svg_string(string)
fileConn<-file("output.html")
writeLines(svg_item, fileConn)
close(fileConn)
#generate the sequence
create_svg_string <- function(bp_info){
x_count <- 10
output <- '<!DOCTYPE html>\n<html>\n<head>\n<meta charset="UTF-8">\n<title>title</title>\n</head>\n
<body>
<style>
.svg_item{
width: 100%;
}
.hover_me:hover{
fill: green;
}
</style><svg class="svg_item">'
for( i in seq(1,nrow(bp_info))){
#get the most common bp
index <- which.max(bp_info[i,])
if(index == 1){
color = 'blue'
}else if (index  == 2){
color = 'red'
}else if (index == 3){
color = 'green'
}else if ( index == 4 ){
color <- 'yellow'
}
line <- paste('<rect class="hover_me" x="', x_count ,'" y="10" width="10" height="20" stroke="black" fill= "', color, '"/>\n')
output <- paste(output, line)
x_count <- x_count + 10
}
output <- paste(output, '</svg>\n</body>\n</html>')
return(output)
}
svg_item <- create_svg_string(string)
fileConn<-file("output.html")
writeLines(svg_item, fileConn)
close(fileConn)
#generate the sequence
create_svg_string <- function(bp_info){
x_count <- 10
output <- '<!DOCTYPE html>\n<html>\n<head>\n<meta charset="UTF-8">\n<title>title</title>\n</head>\n
<body>
<style>
.svg_item{
width: 100%;
}
.hover_me:hover{
fill: green;
}
.variance_none{
fill: black;
}
.variance_01{
fill: grey;
}
.variance_10{
fill: #E6E6E6;
}
.variance_high{
fill: #FFF;
}
</style><svg class="svg_item">'
for( i in seq(1,nrow(bp_info))){
#get the most common bp
index <- which.max(bp_info[i,])
color <- c('blue','red','green','yellow')
variance <- 1 - (max(bp_info[i,]) / sum(bp_info[i,]))
extra_class <- ''
if(variance == 0){
extra_class <- paste(extra_class, 'variance_none')
}else if(variance < .01){
#illumina error rate
extra_class <- paste(extra_class, 'variance_01')
}else if(variance < .10){
extra_class <- paste(extra_class, 'variance_10')
}else{
extra_class <- paste(extra_class, 'variance_high')
}
line <- paste('<rect class="hover_me ', extra_class ,' " x="', x_count ,'" y="10" width="10" height="20" stroke="black" fill= "', '', '"/>\n')
output <- paste(output, line)
x_count <- x_count + 10
}
output <- paste(output, '</svg>\n</body>\n</html>')
return(output)
}
svg_item <- create_svg_string(string)
fileConn<-file("output.html")
writeLines(svg_item, fileConn)
close(fileConn)
#generate the sequence
create_svg_string <- function(bp_info){
x_count <- 10
output <- '<!DOCTYPE html>\n<html>\n<head>\n<meta charset="UTF-8">\n<title>title</title>\n</head>\n
<body>
<style>
.svg_item{
width: 100%;
}
.hover_me:hover{
fill: green;
}
.variance .variance_none{
fill: black;
}
.variance .variance_01{
fill: grey;
}
.variance .variance_10{
fill: #E6E6E6;
}
.variance .variance_high{
fill: #FFF;
}
</style><svg class="svg_item">'
for( i in seq(1,nrow(bp_info))){
#get the most common bp
index <- which.max(bp_info[i,])
color <- c('blue','red','green','yellow')
variance <- 1 - (max(bp_info[i,]) / sum(bp_info[i,]))
extra_class <- ''
if(variance == 0){
extra_class <- paste(extra_class, 'variance_none')
}else if(variance < .01){
#illumina error rate
extra_class <- paste(extra_class, 'variance_01')
}else if(variance < .10){
extra_class <- paste(extra_class, 'variance_10')
}else{
extra_class <- paste(extra_class, 'variance_high')
}
line <- paste('<rect class="hover_me ', extra_class ,' " x="', x_count ,'" y="10" width="10" height="20" stroke="black" fill= "', colors[index], '"/>\n')
output <- paste(output, line)
x_count <- x_count + 10
}
output <- paste(output, '</svg>\n</body>\n</html>')
return(output)
}
svg_item <- create_svg_string(string)
fileConn<-file("output.html")
writeLines(svg_item, fileConn)
close(fileConn)
#generate the sequence
create_svg_string <- function(bp_info){
x_count <- 10
output <- '<!DOCTYPE html>\n<html>\n<head>\n<meta charset="UTF-8">\n<title>title</title>\n</head>\n
<body>
<style>
.svg_item{
width: 100%;
}
.hover_me:hover{
fill: green;
}
.variance .variance_none{
fill: black;
}
.variance .variance_01{
fill: grey;
}
.variance .variance_10{
fill: #E6E6E6;
}
.variance .variance_high{
fill: #FFF;
}
</style><svg class="svg_item">'
for( i in seq(1,nrow(bp_info))){
#get the most common bp
index <- which.max(bp_info[i,])
color <- c('blue','red','green','yellow')
variance <- 1 - (max(bp_info[i,]) / sum(bp_info[i,]))
extra_class <- ''
if(variance == 0){
extra_class <- paste(extra_class, 'variance_none')
}else if(variance < .01){
#illumina error rate
extra_class <- paste(extra_class, 'variance_01')
}else if(variance < .10){
extra_class <- paste(extra_class, 'variance_10')
}else{
extra_class <- paste(extra_class, 'variance_high')
}
line <- paste('<rect class="hover_me ', extra_class ,' " x="', x_count ,'" y="10" width="10" height="20" stroke="black" fill= "', color[index], '"/>\n')
output <- paste(output, line)
x_count <- x_count + 10
}
output <- paste(output, '</svg>\n</body>\n</html>')
return(output)
}
svg_item <- create_svg_string(string)
fileConn<-file("output.html")
writeLines(svg_item, fileConn)
close(fileConn)
